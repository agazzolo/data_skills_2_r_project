)
shinyApp(ui = ui, server = server)
articles <- c("New York Times - 2020",
"ASPCA - 2020",
"DVM360 - 2021",
"ASPCA - 2021",
"Scientific American - 2021",
"Washington Post - 2022",
"Pet Food Industry - 2022")
server <- function(input, output) {
data_source <- reactive({
if (input$art == "New York Times - 2020") {
data <- m2020_nyt_nrc
} else if (input$art == "ASPCA - 2020") {
data <- i2020_aspca_nrc
} else if (input$art == "DVM360 - 2021") {
data <- i2021_dvm_nrc
} else if (input$art == "ASPCA - 2021") {
data <- i2021_aspca_nrc
} else if (input$art == "Scientific American - 2021") {
data <- m2021_sa_nrc
} else if (input$art == "Washington Post - 2022") {
data <- m2022_wapo_nrc
} else if (input$art == "Pet Food Industry - 2022") {
data <- i2022_pfi_nrc
}
})
output$cloud <- renderWordcloud2({
wordcloud2(data_source(),
fontFamily = "sans",
color = brewer.pal(11, "Spectral"))
})
}
ui <- fluidPage(
titlePanel("Word Cloud"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "art",
label = "Choose an article:",
choices = articles),
actionButton("update", "Change"),
),
mainPanel(
wordcloud2Output("cloud")
)
)
)
shinyApp(ui = ui, server = server)
articles <- c("New York Times - 2020",
"ASPCA - 2020",
"DVM360 - 2021",
"ASPCA - 2021",
"Scientific American - 2021",
"Washington Post - 2022",
"Pet Food Industry - 2022")
server <- function(input, output) {
data_source <- reactive({
if (input$art == "New York Times - 2020") {
data <- m2020_nyt_nrc
} else if (input$art == "ASPCA - 2020") {
data <- i2020_aspca_nrc
} else if (input$art == "DVM360 - 2021") {
data <- i2021_dvm_nrc
} else if (input$art == "ASPCA - 2021") {
data <- i2021_aspca_nrc
} else if (input$art == "Scientific American - 2021") {
data <- m2021_sa_nrc
} else if (input$art == "Washington Post - 2022") {
data <- m2022_wapo_nrc
} else if (input$art == "Pet Food Industry - 2022") {
data <- i2022_pfi_nrc
}
})
output$cloud <- renderWordcloud2({
wordcloud2(data_source(),
fontFamily = "sans",
color = brewer.pal(11, "Spectral"))
})
}
ui <- fluidPage(
titlePanel("Word Cloud"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "art",
label = "Choose an article:",
choices = articles),
),
mainPanel(
wordcloud2Output("cloud")
)
)
)
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(rvest)
library(tidycensus)
library(tidytext)
library(nametagger)
library(udpipe)
library(stargazer)
ggplot(data2020, aes(SAH_Duration, adoption_total)) +
geom_point() +
geom_abline()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(rvest)
library(tidycensus)
library(tidytext)
library(nametagger)
library(udpipe)
library(stargazer)
# code sources: for splitting date column: https://stackoverflow.com/questions/4078502/split-date-data-m-d-y-into-3-separate-columns
# for updating state column IDs: https://stackoverflow.com/questions/53639594/how-to-use-mutate-to-add-column-with-state-names-based-on-the-state-abbreviation
adopt <- read_csv("sac_aggregate_dataset_2019_2021.csv")
covid <- read_csv("us-states-new.csv")
covid$date <- as.Date(covid$date)
covid <- covid %>% mutate(
year = as.numeric(format(date, format = "%Y")),
month = as.numeric(format(date, format = "%m")),
day = as.numeric(format(date, format = "%d")))
covid_yr <- covid %>% group_by(state, year) %>% summarise(cases = sum(cases))
url <- "https://en.wikipedia.org/wiki/U.S._state_and_local_government_responses_to_the_COVID-19_pandemic"
request <- read_html(url)
table <- html_table(request, fill = TRUE)
View(table[[3]])
lockdowns <- table[[3]]
colnames(lockdowns) <- c('State_del',
'State',
'Emergency_Declared',
'Stay_At_Home_Ordered',
'Stay_At_Home_Lifted',
'Masks_Required',
'Gatherings',
'Travel_Restrictions',
'Closures_School',
'Closures_Daycare',
'Closures_Restaurants',
'Closures_Retail',
'Sources')
lockdowns <- lockdowns %>% select(!c(State_del,
Gatherings,
Travel_Restrictions,
Closures_School,
Closures_Daycare,
Closures_Restaurants,
Closures_Retail,
Sources))
lockdowns <- lockdowns %>% mutate(SAH = ifelse(Stay_At_Home_Ordered == 'No', 0, 1))
lockdowns = lockdowns[-1,]
lockdowns <- lockdowns %>% separate(Stay_At_Home_Ordered, c("Start_Month", "Start_Day"))
lockdowns <- lockdowns %>% separate(Stay_At_Home_Lifted, c("End_Month", "End_Day"))
lockdowns$Start_Month <- na_if(lockdowns$Start_Month, "No")
lockdowns$End_Month <- na_if(lockdowns$End_Month, "No")
lockdowns$End_Month <- na_if(lockdowns$End_Month, "N")
lockdowns$End_Day <- na_if(lockdowns$End_Day, "a")
lockdowns$End_Day <- na_if(lockdowns$End_Day, "advisory")
lockdowns$year <- 2020
lockdowns$Start_Date <- as.Date(paste(lockdowns$year, lockdowns$Start_Month, lockdowns$Start_Day, sep = "-"),"%Y-%b-%d")
lockdowns$End_Date <- as.Date(paste(lockdowns$year, lockdowns$End_Month, lockdowns$End_Day, sep = "-"),"%Y-%b-%d")
lockdowns$SAH_Duration <- lockdowns$End_Date - lockdowns$Start_Date
lockdown_clean <- lockdowns %>% select(c(State, SAH, Start_Date, End_Date, SAH_Duration))
feline_intake <- c("Intake - Relinquished By Owner Total-Feline",
"Intake - Stray At Large Total-Feline",
"Intake - Transferred In Total-Feline",
"Intake - Owner Intended Euthanasia Total-Feline")
canine_intake <- c("Intake - Relinquished By Owner Total-Canine",
"Intake - Stray At Large Total-Canine",
"Intake - Transferred In Total-Canine",
"Intake - Owner Intended Euthanasia Total-Canine",
"Intakes - Other Intakes Total-Canine")
adopt$feline_intake_total <- adopt$`Intake - Relinquished By Owner Total-Feline` + adopt$`Intake - Stray At Large Total-Feline` + adopt$`Intake - Transferred In Total-Feline` + adopt$`Intake - Owner Intended Euthanasia Total-Feline` + adopt$`Intakes - Other Intakes Total-Feline`
adopt$canine_intake_total <- adopt$`Intake - Relinquished By Owner Total-Canine` + adopt$`Intake - Stray At Large Total-Canine` + adopt$`Intake - Transferred In Total-Canine` + adopt$`Intake - Owner Intended Euthanasia Total-Canine` + adopt$`Intakes - Other Intakes Total-Canine`
adopt$intake_total <- adopt$feline_intake_total + adopt$canine_intake_total
adopt$adoption_total <- adopt$`Live Outcome - Adoption Total-Feline` + adopt$`Live Outcome - Adoption Total-Canine`
adopt_clean <- adopt %>% select(c(State, Year, feline_intake_total, canine_intake_total, intake_total, `Live Outcome - Adoption Total-Feline`, `Live Outcome - Adoption Total-Canine`, adoption_total))
Sys.getenv("CENSUS_API_KEY")
# variables <- load_variables(2020, "pl", cache = FALSE)
state_pop <- get_decennial(geography = "state",
variables = c(population = "P1_001N"),
year = 2020)
state_pop <- state_pop %>% rename(Population = value) %>%
select(c(NAME, Population))
adopt_clean <- adopt_clean %>%
mutate(State = state.name[match(State, state.abb)])
data <- left_join(adopt_clean, covid_yr, by = c("State" = "state", "Year" = "year"))
data <- left_join(data, state_pop, by = c("State" = "NAME"))
data <- left_join(data, lockdown_clean, by = "State")
# dropping US Territories and adding adoption rate and adoptions per capita
data <- data %>% drop_na(State)
data$adoption_rate <- data$adoption_total/data$intake_total
data$adoption_percap <- data$adoption_total/data$Population
write.csv(data, "data_clean.csv", row.names = FALSE)
# pet adoptions per capita, adoptions vs. cases, adoptions vs. sah, cats v dogs on map
data2020 <- data %>% filter(Year == 2020) %>%
mutate(across(SAH_Duration, ~ ifelse(is.na(.), 0, .)))
data_cases <- data %>% filter(Year != 2019) %>%
mutate(across(cases, ~ ifelse(is.na(.), 0, .)))
ggplot(data2020, aes(SAH_Duration, adoption_total)) +
geom_point() +
geom_abline()
ggplot(data_cases, aes(cases, adoption_total)) +
geom_point() +
geom_abline()
state <- tolower(data$State)
map <- map_data("state")
ggplot(data, aes(fill = adoption_total)) +
geom_map(aes(map_id = state), map = map)
ggplot(data2020, aes(SAH_Duration, adoption_percap)) +
geom_point() +
geom_abline()
ggplot(data_cases, aes(cases, adoption_percap)) +
geom_point() +
geom_abline()
ggplot(data2020, aes(SAH_Duration, adoption_percap)) +
geom_point() +
geom_abline() +
labs(title = "Duration of Stay-At-Home Orders and Adoptions Per Capita, 2020") +
xlab("Duration of Stay-At-Home Orders, in days") +
ylab("Pet Adoptions Per Capita")
ggplot(data2020, aes(SAH_Duration, adoption_rate)) +
geom_point() +
geom_abline() +
labs(title = "Duration of Stay-At-Home Orders and Pet Adoption Rate, 2020") +
xlab("Duration of Stay-At-Home Orders, in days") +
ylab("Pet Adoption Rate")
ggplot(data_cases, aes(cases, adoption_percap)) +
geom_point() +
geom_abline() +
labs(title = "Number of COVID-19 Cases and Pet Adoptions Per Capita, 2020-2021") +
xlab("Annual Number of COVID-19 Cases") +
ylab("Pet Adoptions Per Capita")
ggplot(data_cases, aes(cases, adoption_rate)) +
geom_point() +
geom_abline() +
labs(title = "Number of COVID-19 Cases and Pet Adoption Rate, 2020-2021") +
xlab("Annual Number of COVID-19 Cases") +
ylab("Pet Adoption Rate")
ggplot(data2020, aes(SAH_Duration, adoption_percap)) +
geom_point() +
geom_abline(color = "blue") +
labs(title = "Duration of Stay-At-Home Orders and Adoptions Per Capita, 2020") +
xlab("Duration of Stay-At-Home Orders, in days") +
ylab("Pet Adoptions Per Capita")
state <- tolower(data$State)
map <- map_data("state")
ggplot(data, aes(fill = adoption_total)) +
geom_map(aes(map_id = state), map = map)
View(data)
data %>% filter(Year == 2020) %>%
ggplot(aes(fill = adoption_rate)) +
geom_map(aes(map_id = state), map = map)
data %>% filter(Year == 2020) %>%
ggplot(data, aes(fill = adoption_rate)) +
geom_map(aes(map_id = state), map = map)
ggplot(data2020, aes(fill = adoption_rate)) +
geom_map(aes(map_id = state), map = map)
gplot(data2020, aes(map_id = state)) +
geom_map(aes(fill = adoption_rate), map = map)
ggplot(data2020, aes(map_id = state)) +
geom_map(aes(fill = adoption_rate), map = map)
state <- tolower(data$State)
map <- map_data("state")
ggplot(data, aes(map_id = state)) +
geom_map(aes(fill = adoption_rate), map = map)
ggplot(data, aes(map_id = state)) +
geom_map(aes(fill = adoption_rate), map = map) +
coord_sf(
crs = 5070, default_crs = 4326,
xlim = c(-125, -70), ylim = c(25, 52)
)
ggplot(data, aes(map_id = state)) +
geom_map(aes(fill = adoption_rate), map = map) +
coord_sf(
crs = 5070, default_crs = 4326,
xlim = c(-125, -70), ylim = c(25, 52)
) +
facet_wrap(Year)
ggplot(data, aes(map_id = state)) +
geom_map(aes(fill = adoption_rate), map = map) +
coord_sf(
crs = 5070, default_crs = 4326,
xlim = c(-125, -70), ylim = c(25, 52)
) +
facet_grid(Year)
ggplot(data, aes(map_id = state)) +
geom_map(aes(fill = adoption_rate), map = map) +
coord_sf(
crs = 5070, default_crs = 4326,
xlim = c(-125, -70), ylim = c(25, 52)
) +
facet_grid(~Year)
ggplot(data, aes(map_id = state)) +
geom_map(aes(fill = adoption_rate), map = map) +
coord_sf(
crs = 5070, default_crs = 4326,
xlim = c(-125, -70), ylim = c(25, 52)
) +
facet_wrap(~Year)
ggplot(data, aes(map_id = state)) +
geom_map(aes(fill = adoption_percap), map = map) +
coord_sf(
crs = 5070, default_crs = 4326,
xlim = c(-125, -70), ylim = c(25, 52)
) +
facet_wrap(~Year) +
labs(title = "Shelter Pet Adoption Oer Capita in the US, 2019-2021")
ggplot(data, aes(map_id = state)) +
geom_map(aes(fill = adoption_total), map = map) +
coord_sf(
crs = 5070, default_crs = 4326,
xlim = c(-125, -70), ylim = c(25, 52)
) +
facet_wrap(~Year) +
labs(title = "Total Shelter Pet Adoption in the US, 2019-2021")
ggplot(data2020, aes(SAH_Duration, adoption_percap)) +
geom_point() +
geom_abline(color = "blue") +
labs(title = "Duration of Stay-At-Home Orders and Adoptions Per Capita, 2020") +
xlab("Duration of Stay-At-Home Orders, in days") +
ylab("Pet Adoptions Per Capita")
ggplot(data2020, aes(SAH_Duration, adoption_percap)) +
geom_point() +
geom_abline(color = "blue") +
labs(title = "Duration of Stay-At-Home Orders and Adoptions Per Capita, 2020") +
xlab("Duration of Stay-At-Home Orders, in days") +
ylab("Pet Adoptions Per Capita")
ggplot(data2020, aes(SAH_Duration, adoption_rate)) +
geom_point() +
geom_abline(color = "blue") +
labs(title = "Duration of Stay-At-Home Orders and Pet Adoption Rate, 2020") +
xlab("Duration of Stay-At-Home Orders, in days") +
ylab("Pet Adoption Rate")
ggplot(data_cases, aes(cases, adoption_percap)) +
geom_point() +
geom_abline(color = "blue") +
labs(title = "Number of COVID-19 Cases and Pet Adoptions Per Capita, 2020-2021") +
xlab("Annual Number of COVID-19 Cases") +
ylab("Pet Adoptions Per Capita")
ggplot(data_cases, aes(cases, adoption_rate)) +
geom_point() +
geom_abline(color = "blue") +
labs(title = "Number of COVID-19 Cases and Pet Adoption Rate, 2020-2021") +
xlab("Annual Number of COVID-19 Cases") +
ylab("Pet Adoption Rate")
ggplot(data, aes(map_id = state)) +
geom_map(aes(fill = adoption_rate), map = map) +
coord_sf(
crs = 5070, default_crs = 4326,
xlim = c(-125, -70), ylim = c(25, 52)
) +
facet_wrap(~Year) +
labs(title = "Shelter Pet Adoption Rate in the US, 2019-2021")
ggplot(data, aes(map_id = state)) +
geom_map(aes(fill = adoption_percap), map = map) +
coord_sf(
crs = 5070, default_crs = 4326,
xlim = c(-125, -70), ylim = c(25, 52)
) +
facet_wrap(~Year) +
labs(title = "Shelter Pet Adoption Per Capita in the US, 2019-2021")
ggplot(data2020, aes(SAH_Duration, adoption_percap)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Duration of Stay-At-Home Orders and Adoptions Per Capita, 2020") +
xlab("Duration of Stay-At-Home Orders, in days") +
ylab("Pet Adoptions Per Capita")
ggplot(data2020, aes(SAH_Duration, adoption_rate)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Duration of Stay-At-Home Orders and Pet Adoption Rate, 2020") +
xlab("Duration of Stay-At-Home Orders, in days") +
ylab("Pet Adoption Rate")
ggplot(data_cases, aes(cases, adoption_percap)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Number of COVID-19 Cases and Pet Adoptions Per Capita, 2020-2021") +
xlab("Annual Number of COVID-19 Cases") +
ylab("Pet Adoptions Per Capita")
ggplot(data_cases, aes(cases, adoption_rate)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Number of COVID-19 Cases and Pet Adoption Rate, 2020-2021") +
xlab("Annual Number of COVID-19 Cases") +
ylab("Pet Adoption Rate")
reg_adopt_cases <- lm(adoption_total ~ cases + Population, data = data_cases)
stargazer(reg_adopt_cases, type = "text")
reg_adoptrate_cases <- lm(adoption_rate ~ cases + Population, data = data_cases)
stargazer(reg_adoptrate_cases, type = "text")
reg_adopt_SAH <- lm(adoption_total ~ SAH_Duration + Population, data = data2020)
stargazer(reg_adopt_SAH, type = "text")
reg_adoptrate_SAH <- lm(adoption_rate ~ SAH_Duration + Population, data = data2020)
stargazer(reg_adoptrate_SAH, type = "text")
setwd("~/Documents/Data & Programming II/data_skills_2_r_project")
path <- "~/Documents/Data & Programming II/data_skills_2_r_project"
write.csv(m2020_nyt_nrc, "path/Data/nyt2020_nrc.csv", row.names = FALSE)
write.csv(m2020_nyt_nrc, "path/nyt2020_nrc.csv", row.names = FALSE)
write.csv(m2020_nyt_nrc, "~/Documents/Data & Programming II/data_skills_2_r_project/Data/nyt2020_nrc.csv", row.names = FALSE)
write.csv(data, "~/Documents/Data & Programming II/data_skills_2_r_project/Data/data_clean.csv", row.names = FALSE)
write.csv(i2020_aspca_nrc, "~/Documents/Data & Programming II/data_skills_2_r_project/Data/aspca2020_nrc.csv", row.names = FALSE)
write.csv(i2021_dvm_nrc, "~/Documents/Data & Programming II/data_skills_2_r_project/Data/dvm2021_nrc.csv", row.names = FALSE)
write.csv(i2021_aspca_nrc, "~/Documents/Data & Programming II/data_skills_2_r_project/Data/aspca2021_nrc.csv", row.names = FALSE)
write.csv(m2021_sa_nrc, "~/Documents/Data & Programming II/data_skills_2_r_project/Data/sa2021_nrc.csv", row.names = FALSE)
write.csv(m2022_wapo_nrc, "~/Documents/Data & Programming II/data_skills_2_r_project/Data/wapo2022_nrc.csv", row.names = FALSE)
write.csv(i2022_pfi_nrc, "~/Documents/Data & Programming II/data_skills_2_r_project/Data/pfi2022_nrc.csv", row.names = FALSE)
library(tidyverse)
library(wordcloud2)
library(shiny)
library(plotly)
library(scales)
setwd("~/")
setwd("~/Documents/Data & Programming II/data_skills_2_r_project")
articles <- c("New York Times - 2020",
"ASPCA - 2020",
"DVM360 - 2021",
"ASPCA - 2021",
"Scientific American - 2021",
"Washington Post - 2022",
"Pet Food Industry - 2022")
server <- function(input, output) {
data_source <- reactive({
if (input$art == "New York Times - 2020") {
data <- read_csv("nyt2020_nrc.csv")
} else if (input$art == "ASPCA - 2020") {
data <- read_csv("aspca2020_nrc.csv")
} else if (input$art == "DVM360 - 2021") {
data <- read_csv("dvm2021_nrc.csv")
} else if (input$art == "ASPCA - 2021") {
data <- read_csv("aspca2021_nrc.csv")
} else if (input$art == "Scientific American - 2021") {
data <- read_csv("sa2021_nrc.csv")
} else if (input$art == "Washington Post - 2022") {
data <- read_csv("wapo2022_nrc.csv")
} else if (input$art == "Pet Food Industry - 2022") {
data <- read_csv("pfi2022_nrc.csv")
}
})
output$cloud <- renderWordcloud2({
wordcloud2(data_source(),
fontFamily = "sans",
color = brewer.pal(11, "Spectral"))
})
}
ui <- fluidPage(
titlePanel("Word Cloud"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "art",
label = "Choose an article:",
choices = articles),
),
mainPanel(
wordcloud2Output("cloud")
)
)
)
shinyApp(ui = ui, server = server)
setwd("~/Documents/Data & Programming II/data_skills_2_r_project/Data")
articles <- c("New York Times - 2020",
"ASPCA - 2020",
"DVM360 - 2021",
"ASPCA - 2021",
"Scientific American - 2021",
"Washington Post - 2022",
"Pet Food Industry - 2022")
server <- function(input, output) {
data_source <- reactive({
if (input$art == "New York Times - 2020") {
data <- read_csv("nyt2020_nrc.csv")
} else if (input$art == "ASPCA - 2020") {
data <- read_csv("aspca2020_nrc.csv")
} else if (input$art == "DVM360 - 2021") {
data <- read_csv("dvm2021_nrc.csv")
} else if (input$art == "ASPCA - 2021") {
data <- read_csv("aspca2021_nrc.csv")
} else if (input$art == "Scientific American - 2021") {
data <- read_csv("sa2021_nrc.csv")
} else if (input$art == "Washington Post - 2022") {
data <- read_csv("wapo2022_nrc.csv")
} else if (input$art == "Pet Food Industry - 2022") {
data <- read_csv("pfi2022_nrc.csv")
}
})
output$cloud <- renderWordcloud2({
wordcloud2(data_source(),
fontFamily = "sans",
color = brewer.pal(11, "Spectral"))
})
}
ui <- fluidPage(
titlePanel("Word Cloud"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "art",
label = "Choose an article:",
choices = articles),
),
mainPanel(
wordcloud2Output("cloud")
)
)
)
shinyApp(ui = ui, server = server)
runApp('~/Documents/Data & Programming II/data_skills_2_r_project/shiny.R')
setwd("~/Documents/Data & Programming II/data_skills_2_r_project/Data")
runApp('~/Documents/Data & Programming II/data_skills_2_r_project/shiny.R')
setwd("~/Documents/Data & Programming II/data_skills_2_r_project/Data")
runApp('~/Documents/Data & Programming II/data_skills_2_r_project/shiny.R')
setwd("~/Documents/Data & Programming II/data_skills_2_r_project/Data")
runApp('~/Documents/Data & Programming II/data_skills_2_r_project/shiny.R')
